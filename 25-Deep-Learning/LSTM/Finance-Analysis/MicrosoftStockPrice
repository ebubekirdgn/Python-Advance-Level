{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","authorship_tag":"ABX9TyNuBGFDSpSZHo6CxWd+fJlX"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","execution_count":32,"metadata":{"id":"RIxJIA91odGQ","executionInfo":{"status":"ok","timestamp":1711575557518,"user_tz":-180,"elapsed":294,"user":{"displayName":"Ebubekir Doğan","userId":"10058737348807350816"}}},"outputs":[],"source":["# Veriyi okumak ve işleme adımında kullanılacak olan kütüphaneler\n","import numpy as np\n","import pandas as pd\n","import datetime as dt\n","import tensorflow as tf\n","import matplotlib.pyplot as plt\n","\n","\n","# Model değerlendirme ve veriyi scale edebilmemiz için kullanılacak olan kütüphaneler\n","from sklearn.preprocessing import MinMaxScaler\n","from sklearn.metrics import mean_squared_error\n","\n","# Model için kullanılacak olan kütüphaneler\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense, LSTM, Dropout\n","from tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping\n","\n","# Warningleri kapatmak için kullanılan kütüphaneler\n","import warnings\n","warnings.filterwarnings('ignore')\n","\n","# Tensorflow Warning Engelleme\n","import os\n","os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'\n","tf.compat.v1.logging.set_verbosity(tf.compat.v1.logging.ERROR)"]},{"cell_type":"code","source":["df = pd.read_csv('/content/Microsoft_Stock.csv')\n","df.head()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"UdqA5fNaoo6-","executionInfo":{"status":"ok","timestamp":1711575559943,"user_tz":-180,"elapsed":347,"user":{"displayName":"Ebubekir Doğan","userId":"10058737348807350816"}},"outputId":"d3347688-8dc1-45c5-9395-114692588bc6"},"execution_count":33,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                Date   Open   High    Low  Close    Volume\n","0  4/1/2015 16:00:00  40.60  40.76  40.31  40.72  36865322\n","1  4/2/2015 16:00:00  40.66  40.74  40.12  40.29  37487476\n","2  4/6/2015 16:00:00  40.34  41.78  40.18  41.55  39223692\n","3  4/7/2015 16:00:00  41.61  41.91  41.31  41.53  28809375\n","4  4/8/2015 16:00:00  41.48  41.69  41.04  41.42  24753438"],"text/html":["\n","  <div id=\"df-b9234092-9eee-446a-b08a-492724db317c\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Date</th>\n","      <th>Open</th>\n","      <th>High</th>\n","      <th>Low</th>\n","      <th>Close</th>\n","      <th>Volume</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>4/1/2015 16:00:00</td>\n","      <td>40.60</td>\n","      <td>40.76</td>\n","      <td>40.31</td>\n","      <td>40.72</td>\n","      <td>36865322</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4/2/2015 16:00:00</td>\n","      <td>40.66</td>\n","      <td>40.74</td>\n","      <td>40.12</td>\n","      <td>40.29</td>\n","      <td>37487476</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4/6/2015 16:00:00</td>\n","      <td>40.34</td>\n","      <td>41.78</td>\n","      <td>40.18</td>\n","      <td>41.55</td>\n","      <td>39223692</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4/7/2015 16:00:00</td>\n","      <td>41.61</td>\n","      <td>41.91</td>\n","      <td>41.31</td>\n","      <td>41.53</td>\n","      <td>28809375</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4/8/2015 16:00:00</td>\n","      <td>41.48</td>\n","      <td>41.69</td>\n","      <td>41.04</td>\n","      <td>41.42</td>\n","      <td>24753438</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b9234092-9eee-446a-b08a-492724db317c')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-b9234092-9eee-446a-b08a-492724db317c button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-b9234092-9eee-446a-b08a-492724db317c');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-475941f6-f991-4152-b570-a7ff2d42c47d\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-475941f6-f991-4152-b570-a7ff2d42c47d')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-475941f6-f991-4152-b570-a7ff2d42c47d button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 1511,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 1511,\n        \"samples\": [\n          \"11/5/2018 16:00:00\",\n          \"9/12/2017 16:00:00\",\n          \"9/30/2020 16:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Open\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 56.691333461349465,\n        \"min\": 40.34,\n        \"max\": 245.03,\n        \"num_unique_values\": 1409,\n        \"samples\": [\n          59.53,\n          103.04,\n          204.29\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"High\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 57.382276132392505,\n        \"min\": 40.74,\n        \"max\": 246.13,\n        \"num_unique_values\": 1400,\n        \"samples\": [\n          94.27,\n          85.98,\n          44.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Low\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 55.97715536548782,\n        \"min\": 39.72,\n        \"max\": 242.92,\n        \"num_unique_values\": 1397,\n        \"samples\": [\n          59.97,\n          199.96,\n          202.03\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 56.70229871177711,\n        \"min\": 40.29,\n        \"max\": 244.99,\n        \"num_unique_values\": 1398,\n        \"samples\": [\n          46.88,\n          72.28,\n          58.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Volume\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14252659,\n        \"min\": 101612,\n        \"max\": 135227059,\n        \"num_unique_values\": 1511,\n        \"samples\": [\n          27922144,\n          14394850,\n          33829088\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":33}]},{"cell_type":"code","source":["def check_df(dataframe, size=5):\n","    print('\\n\\n--- Shape -----------------------------------------------------------------------')\n","    print(dataframe.shape)\n","    print('\\n\\n--- Types -----------------------------------------------------------------------')\n","    print(dataframe.dtypes)\n","    print('\\n\\n--- Head ------------------------------------------------------------------------')\n","    print(dataframe.head(size))\n","    print('\\n\\n--- Tail ------------------------------------------------------------------------')\n","    print(dataframe.tail(size))\n","    print('\\n\\n--- NA --------------------------------------------------------------------------')\n","    print(dataframe.isnull().sum())\n","    print('\\n\\n--- Quantiles -------------------------------------------------------------------')\n","    print(df.drop('Date', axis=1).quantile([0, 0.05, 0.5, 0.95, 0.99, 1]).T)"],"metadata":{"id":"s20Zsvj5otn0","executionInfo":{"status":"ok","timestamp":1711575571065,"user_tz":-180,"elapsed":309,"user":{"displayName":"Ebubekir Doğan","userId":"10058737348807350816"}}},"execution_count":34,"outputs":[]},{"cell_type":"code","source":["check_df(df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"22SVlc8CovNk","executionInfo":{"status":"ok","timestamp":1711575572813,"user_tz":-180,"elapsed":304,"user":{"displayName":"Ebubekir Doğan","userId":"10058737348807350816"}},"outputId":"8fba5ad4-0f3e-451a-dd09-d49a69268d70"},"execution_count":35,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","\n","--- Shape -----------------------------------------------------------------------\n","(1511, 6)\n","\n","\n","--- Types -----------------------------------------------------------------------\n","Date       object\n","Open      float64\n","High      float64\n","Low       float64\n","Close     float64\n","Volume      int64\n","dtype: object\n","\n","\n","--- Head ------------------------------------------------------------------------\n","                Date   Open   High    Low  Close    Volume\n","0  4/1/2015 16:00:00  40.60  40.76  40.31  40.72  36865322\n","1  4/2/2015 16:00:00  40.66  40.74  40.12  40.29  37487476\n","2  4/6/2015 16:00:00  40.34  41.78  40.18  41.55  39223692\n","3  4/7/2015 16:00:00  41.61  41.91  41.31  41.53  28809375\n","4  4/8/2015 16:00:00  41.48  41.69  41.04  41.42  24753438\n","\n","\n","--- Tail ------------------------------------------------------------------------\n","                    Date    Open    High     Low   Close    Volume\n","1506  3/25/2021 16:00:00  235.30  236.94  231.57  232.34  34061853\n","1507  3/26/2021 16:00:00  231.55  236.71  231.55  236.48  25479853\n","1508  3/29/2021 16:00:00  236.59  236.80  231.88  235.24  25227455\n","1509  3/30/2021 16:00:00  233.53  233.85  231.10  231.85  24792012\n","1510  3/31/2021 16:00:00  232.91  239.10  232.39  235.77  43623471\n","\n","\n","--- NA --------------------------------------------------------------------------\n","Date      0\n","Open      0\n","High      0\n","Low       0\n","Close     0\n","Volume    0\n","dtype: int64\n","\n","\n","--- Quantiles -------------------------------------------------------------------\n","             0.00          0.05         0.50          0.95          0.99  \\\n","Open        40.34  4.610000e+01        93.99  2.177900e+02  2.374830e+02   \n","High        40.74  4.675000e+01        95.10  2.204700e+02  2.409890e+02   \n","Low         39.72  4.570500e+01        92.92  2.158550e+02  2.352970e+02   \n","Close       40.29  4.618500e+01        93.86  2.183400e+02  2.376970e+02   \n","Volume  101612.00  1.583396e+07  26629615.00  5.699980e+07  8.357230e+07   \n","\n","                1.00  \n","Open    2.450300e+02  \n","High    2.461300e+02  \n","Low     2.429200e+02  \n","Close   2.449900e+02  \n","Volume  1.352271e+08  \n"]}]},{"cell_type":"code","source":["# Object olan date değişken tipini datetime yapıyoruz\n","df['Date'] = pd.to_datetime(df['Date'])"],"metadata":{"id":"lLjadwTHo_79","executionInfo":{"status":"ok","timestamp":1711575576180,"user_tz":-180,"elapsed":286,"user":{"displayName":"Ebubekir Doğan","userId":"10058737348807350816"}}},"execution_count":36,"outputs":[]},{"cell_type":"code","source":["# Sadece Close değişkenine göre bir eğitim yapacağız, bunun için tarih ve close değişkeninden yeni bir df oluşturuyoruz\n","tesla_df = df[['Date', 'Close']]\n","tesla_df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"dFapf-oFpID0","executionInfo":{"status":"ok","timestamp":1711575578293,"user_tz":-180,"elapsed":313,"user":{"displayName":"Ebubekir Doğan","userId":"10058737348807350816"}},"outputId":"ba6cee2c-94e6-4fd6-9a81-5977e2b15d12"},"execution_count":37,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                 Date  Close\n","0 2015-04-01 16:00:00  40.72\n","1 2015-04-02 16:00:00  40.29\n","2 2015-04-06 16:00:00  41.55\n","3 2015-04-07 16:00:00  41.53\n","4 2015-04-08 16:00:00  41.42"],"text/html":["\n","  <div id=\"df-5f74e146-3d4d-45d8-8a7a-fe48f1ac1fb3\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Date</th>\n","      <th>Close</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2015-04-01 16:00:00</td>\n","      <td>40.72</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2015-04-02 16:00:00</td>\n","      <td>40.29</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2015-04-06 16:00:00</td>\n","      <td>41.55</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2015-04-07 16:00:00</td>\n","      <td>41.53</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2015-04-08 16:00:00</td>\n","      <td>41.42</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5f74e146-3d4d-45d8-8a7a-fe48f1ac1fb3')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-5f74e146-3d4d-45d8-8a7a-fe48f1ac1fb3 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-5f74e146-3d4d-45d8-8a7a-fe48f1ac1fb3');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-aee9958d-bfdc-4367-bd3a-aa3404ca271f\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-aee9958d-bfdc-4367-bd3a-aa3404ca271f')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-aee9958d-bfdc-4367-bd3a-aa3404ca271f button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"tesla_df","summary":"{\n  \"name\": \"tesla_df\",\n  \"rows\": 1511,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2015-04-01 16:00:00\",\n        \"max\": \"2021-03-31 16:00:00\",\n        \"num_unique_values\": 1511,\n        \"samples\": [\n          \"2018-11-05 16:00:00\",\n          \"2017-09-12 16:00:00\",\n          \"2020-09-30 16:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 56.70229871177711,\n        \"min\": 40.29,\n        \"max\": 244.99,\n        \"num_unique_values\": 1398,\n        \"samples\": [\n          46.88,\n          72.28,\n          58.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":37}]},{"cell_type":"code","source":["print('Min Tarih: ', tesla_df['Date'].min())\n","print('Max Tarih: ', tesla_df['Date'].max())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FQA6JQebpR4O","executionInfo":{"status":"ok","timestamp":1711575584549,"user_tz":-180,"elapsed":285,"user":{"displayName":"Ebubekir Doğan","userId":"10058737348807350816"}},"outputId":"20029b61-a0be-4b80-b562-324d4637f4c6"},"execution_count":38,"outputs":[{"output_type":"stream","name":"stdout","text":["Min Tarih:  2015-04-01 16:00:00\n","Max Tarih:  2021-03-31 16:00:00\n"]}]},{"cell_type":"code","source":["# Date değişkenini index yapacağız ve df içindeki kolonunu sileceğiz\n","tesla_df.index = tesla_df['Date']\n","tesla_df.drop('Date', axis=1, inplace=True)\n","tesla_df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":237},"id":"Oul058Bdp_Q1","executionInfo":{"status":"ok","timestamp":1711575586070,"user_tz":-180,"elapsed":305,"user":{"displayName":"Ebubekir Doğan","userId":"10058737348807350816"}},"outputId":"6a3d1246-3322-48b3-984c-218daef1e859"},"execution_count":39,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                     Close\n","Date                      \n","2015-04-01 16:00:00  40.72\n","2015-04-02 16:00:00  40.29\n","2015-04-06 16:00:00  41.55\n","2015-04-07 16:00:00  41.53\n","2015-04-08 16:00:00  41.42"],"text/html":["\n","  <div id=\"df-266d46bf-2011-4d4f-b7fa-85e2e633f0ee\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Close</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2015-04-01 16:00:00</th>\n","      <td>40.72</td>\n","    </tr>\n","    <tr>\n","      <th>2015-04-02 16:00:00</th>\n","      <td>40.29</td>\n","    </tr>\n","    <tr>\n","      <th>2015-04-06 16:00:00</th>\n","      <td>41.55</td>\n","    </tr>\n","    <tr>\n","      <th>2015-04-07 16:00:00</th>\n","      <td>41.53</td>\n","    </tr>\n","    <tr>\n","      <th>2015-04-08 16:00:00</th>\n","      <td>41.42</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-266d46bf-2011-4d4f-b7fa-85e2e633f0ee')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-266d46bf-2011-4d4f-b7fa-85e2e633f0ee button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-266d46bf-2011-4d4f-b7fa-85e2e633f0ee');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-dbb3a1e9-898d-4efc-a661-93c09d841332\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-dbb3a1e9-898d-4efc-a661-93c09d841332')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-dbb3a1e9-898d-4efc-a661-93c09d841332 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"tesla_df","summary":"{\n  \"name\": \"tesla_df\",\n  \"rows\": 1511,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2015-04-01 16:00:00\",\n        \"max\": \"2021-03-31 16:00:00\",\n        \"num_unique_values\": 1511,\n        \"samples\": [\n          \"2018-11-05 16:00:00\",\n          \"2017-09-12 16:00:00\",\n          \"2020-09-30 16:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 56.70229871177711,\n        \"min\": 40.29,\n        \"max\": 244.99,\n        \"num_unique_values\": 1398,\n        \"samples\": [\n          46.88,\n          72.28,\n          58.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":39}]},{"cell_type":"code","source":["# İlerideki bölümlerde ihtiyaç olacağından dolayı result_df adı altında bir df'te saklıyoruz\n","result_df = tesla_df.copy()\n"],"metadata":{"id":"Hkha2TgBqEbr","executionInfo":{"status":"ok","timestamp":1711575605771,"user_tz":-180,"elapsed":297,"user":{"displayName":"Ebubekir Doğan","userId":"10058737348807350816"}}},"execution_count":42,"outputs":[]},{"cell_type":"code","source":["# Şu ana kadar olan kısmı görselleştireceğiz\n","plt.figure(figsize=(18,6))\n","plt.plot(df['Date'],df['Close'], marker='o')\n","plt.title('ASELSAN HİSSE')\n","plt.xlabel('Tarih')\n","plt.ylabel('Fiyat')\n","plt.xticks(rotation=45)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":447},"id":"KIy13zadqGwL","executionInfo":{"status":"ok","timestamp":1711575680749,"user_tz":-180,"elapsed":1023,"user":{"displayName":"Ebubekir Doğan","userId":"10058737348807350816"}},"outputId":"9559d88c-9eb8-486c-fdec-bff171c1ddcf"},"execution_count":46,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1800x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Modele sokmadan önce verileri numpy arrayine çevirmemiz gerekiyor\n","tesla_df = tesla_df.values\n","tesla_df[0:5]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6a-H6zu3wNW2","executionInfo":{"status":"ok","timestamp":1711575926417,"user_tz":-180,"elapsed":308,"user":{"displayName":"Ebubekir Doğan","userId":"10058737348807350816"}},"outputId":"964c14aa-55f1-4f0a-a531-24eb59c5d66c"},"execution_count":47,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[40.72],\n","       [40.29],\n","       [41.55],\n","       [41.53],\n","       [41.42]])"]},"metadata":{},"execution_count":47}]},{"cell_type":"code","source":["# Sinir ağlarında genel olarak kullanılan veri tipi olan float32'e dönüştürme yapıyoruz\n","tesla_df = tesla_df.astype('float32')"],"metadata":{"id":"HRKiehTxxSrH","executionInfo":{"status":"ok","timestamp":1711575928592,"user_tz":-180,"elapsed":336,"user":{"displayName":"Ebubekir Doğan","userId":"10058737348807350816"}}},"execution_count":48,"outputs":[]},{"cell_type":"code","source":["# Verimizin son hali\n","type(tesla_df), tesla_df.dtype"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wTIvD34RxWn1","executionInfo":{"status":"ok","timestamp":1711575930505,"user_tz":-180,"elapsed":314,"user":{"displayName":"Ebubekir Doğan","userId":"10058737348807350816"}},"outputId":"17f5910d-5376-47a7-b3d4-e73bd97b8575"},"execution_count":49,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(numpy.ndarray, dtype('float32'))"]},"metadata":{},"execution_count":49}]},{"cell_type":"code","source":["# train-test ayrımının yapılması\n","# Zaman serilerinde sklearn içinde test train split fonksiyonunu kullanamayız. Çünkü bu fonksiyon\n","# verileri random olarak seçiyor ve buda zaman bağlamını ve mantık aktarımını bozuyor.\n","# Bu sebepten dolayı bunu kendi yazdığımız basit bir fonksiyon ile yapacağız.\n","\n","def split_data(dataframe, test_size):\n","    pos = int(round(len(dataframe) * (1-test_size)))\n","    train = dataframe[:pos]\n","    test = dataframe[pos:]\n","    return train, test, pos"],"metadata":{"id":"kfEB81gExYUm","executionInfo":{"status":"ok","timestamp":1711575932889,"user_tz":-180,"elapsed":336,"user":{"displayName":"Ebubekir Doğan","userId":"10058737348807350816"}}},"execution_count":50,"outputs":[]},{"cell_type":"code","source":["train, test, pos = split_data(tesla_df, 0.20)\n","print(train.shape, test.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"o1NDUI2Dxakn","executionInfo":{"status":"ok","timestamp":1711575934622,"user_tz":-180,"elapsed":328,"user":{"displayName":"Ebubekir Doğan","userId":"10058737348807350816"}},"outputId":"7579b902-d769-4392-bed2-eac64d216881"},"execution_count":51,"outputs":[{"output_type":"stream","name":"stdout","text":["(1209, 1) (302, 1)\n"]}]},{"cell_type":"code","source":["# Standartlaştırma işlemlerini yapıyoruz\n","\n","scaler_train = MinMaxScaler(feature_range=(0,1))\n","train = scaler_train.fit_transform(train)\n","\n","scaler_test = MinMaxScaler(feature_range=(0,1))\n","test = scaler_test.fit_transform(test)\n","\n","print(train[0:5], test[0:5])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MgZ7Lu46xdLt","executionInfo":{"status":"ok","timestamp":1711575936757,"user_tz":-180,"elapsed":473,"user":{"displayName":"Ebubekir Doğan","userId":"10058737348807350816"}},"outputId":"fdb97c9e-e690-4d71-faae-0c873d22643b"},"execution_count":52,"outputs":[{"output_type":"stream","name":"stdout","text":["[[0.00339091]\n"," [0.        ]\n"," [0.00993612]\n"," [0.00977838]\n"," [0.00891095]] [[0.28365433]\n"," [0.276353  ]\n"," [0.28566217]\n"," [0.27032948]\n"," [0.24514008]]\n"]}]},{"cell_type":"code","source":["# Geçmiş veriler ile feature yaratma\n","\n","def create_features(data, lookback):\n","    X, Y = [], []\n","    for i in range(lookback, len(data)):\n","        X.append(data[i-lookback:i,0])\n","        Y.append(data[i,0])\n","    return np.array(X), np.array(Y)"],"metadata":{"id":"W7BcWsYBxfkl","executionInfo":{"status":"ok","timestamp":1711575939804,"user_tz":-180,"elapsed":456,"user":{"displayName":"Ebubekir Doğan","userId":"10058737348807350816"}}},"execution_count":53,"outputs":[]},{"cell_type":"code","source":["lookback = 20 #20 günlül veri alarak"],"metadata":{"id":"5-4IWNEOxhx2","executionInfo":{"status":"ok","timestamp":1711575942431,"user_tz":-180,"elapsed":479,"user":{"displayName":"Ebubekir Doğan","userId":"10058737348807350816"}}},"execution_count":54,"outputs":[]},{"cell_type":"code","source":["# Train\n","x_train, y_train = create_features(train, lookback)\n","\n","# Test\n","x_test, y_test = create_features(test, lookback)"],"metadata":{"id":"ThX6OPe8xjNu","executionInfo":{"status":"ok","timestamp":1711575943625,"user_tz":-180,"elapsed":2,"user":{"displayName":"Ebubekir Doğan","userId":"10058737348807350816"}}},"execution_count":55,"outputs":[]},{"cell_type":"code","source":["print(x_train.shape, y_train.shape, x_test.shape, y_test.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-ijyl1NbxkqO","executionInfo":{"status":"ok","timestamp":1711575945224,"user_tz":-180,"elapsed":457,"user":{"displayName":"Ebubekir Doğan","userId":"10058737348807350816"}},"outputId":"ed6d968f-b855-480f-d9a9-00fb865c021e"},"execution_count":56,"outputs":[{"output_type":"stream","name":"stdout","text":["(1189, 20) (1189,) (282, 20) (282,)\n"]}]},{"cell_type":"code","source":["x_train[0:5]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ph58WBbjxmL9","executionInfo":{"status":"ok","timestamp":1711575947428,"user_tz":-180,"elapsed":370,"user":{"displayName":"Ebubekir Doğan","userId":"10058737348807350816"}},"outputId":"52d9588e-550e-4c90-ce7a-81ff589cf69e"},"execution_count":57,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0.00339091, 0.        , 0.00993612, 0.00977838, 0.00891095,\n","        0.00938413, 0.01127672, 0.01159212, 0.01072472, 0.01553503,\n","        0.01474646, 0.01048812, 0.02066082, 0.01853165, 0.0212917 ,\n","        0.02405173, 0.05977446, 0.06103617, 0.06994715, 0.06915858],\n","       [0.        , 0.00993612, 0.00977838, 0.00891095, 0.00938413,\n","        0.01127672, 0.01159212, 0.01072472, 0.01553503, 0.01474646,\n","        0.01048812, 0.02066082, 0.01853165, 0.0212917 , 0.02405173,\n","        0.05977446, 0.06103617, 0.06994715, 0.06915858, 0.06584653],\n","       [0.00993612, 0.00977838, 0.00891095, 0.00938413, 0.01127672,\n","        0.01159212, 0.01072472, 0.01553503, 0.01474646, 0.01048812,\n","        0.02066082, 0.01853165, 0.0212917 , 0.02405173, 0.05977446,\n","        0.06103617, 0.06994715, 0.06915858, 0.06584653, 0.06600425],\n","       [0.00977838, 0.00891095, 0.00938413, 0.01127672, 0.01159212,\n","        0.01072472, 0.01553503, 0.01474646, 0.01048812, 0.02066082,\n","        0.01853165, 0.0212917 , 0.02405173, 0.05977446, 0.06103617,\n","        0.06994715, 0.06915858, 0.06584653, 0.06600425, 0.06269222],\n","       [0.00891095, 0.00938413, 0.01127672, 0.01159212, 0.01072472,\n","        0.01553503, 0.01474646, 0.01048812, 0.02066082, 0.01853165,\n","        0.0212917 , 0.02405173, 0.05977446, 0.06103617, 0.06994715,\n","        0.06915858, 0.06584653, 0.06600425, 0.06269222, 0.05764529]],\n","      dtype=float32)"]},"metadata":{},"execution_count":57}]},{"cell_type":"code","source":["y_train[0:5]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JcPwapjoxn1V","executionInfo":{"status":"ok","timestamp":1711575949565,"user_tz":-180,"elapsed":290,"user":{"displayName":"Ebubekir Doğan","userId":"10058737348807350816"}},"outputId":"e3fa5230-4471-41a6-8d96-61ef403ecd4f"},"execution_count":58,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.06584653, 0.06600425, 0.06269222, 0.05764529, 0.047236  ],\n","      dtype=float32)"]},"metadata":{},"execution_count":58}]},{"cell_type":"code","source":["# Veri setlerini 3 boyutlu yapıya getirme\n","x_train = np.reshape(x_train, (x_train.shape[0], 1, x_train.shape[1]))\n","x_test = np.reshape(x_test, (x_test.shape[0], 1, x_test.shape[1]))\n","\n","y_train = y_train.reshape(-1, 1)\n","y_test = y_test.reshape(-1, 1)\n","\n","print(x_train.shape, y_train.shape, x_test.shape, y_test.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MXiOyUiixpou","executionInfo":{"status":"ok","timestamp":1711575951718,"user_tz":-180,"elapsed":323,"user":{"displayName":"Ebubekir Doğan","userId":"10058737348807350816"}},"outputId":"f94d0c68-c6ec-4f89-f664-2bd1bc4fa7db"},"execution_count":59,"outputs":[{"output_type":"stream","name":"stdout","text":["(1189, 1, 20) (1189, 1) (282, 1, 20) (282, 1)\n"]}]},{"cell_type":"code","source":["# Model kurulumu\n","model = Sequential()\n","model.add(LSTM(units=50,\n","               activation='relu',\n","               input_shape=(x_train.shape[1], lookback)))\n","model.add(Dropout(0.2))\n","model.add(Dense(1))"],"metadata":{"id":"ikTlZA_nxsse","executionInfo":{"status":"ok","timestamp":1711575954634,"user_tz":-180,"elapsed":300,"user":{"displayName":"Ebubekir Doğan","userId":"10058737348807350816"}}},"execution_count":60,"outputs":[]},{"cell_type":"code","source":["# Model özeti\n","model.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tzZsVqfTxunO","executionInfo":{"status":"ok","timestamp":1711576016959,"user_tz":-180,"elapsed":326,"user":{"displayName":"Ebubekir Doğan","userId":"10058737348807350816"}},"outputId":"02e3837f-dfa9-4ca8-e5a6-ce9d41560f2f"},"execution_count":62,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," lstm (LSTM)                 (None, 50)                14200     \n","                                                                 \n"," dropout (Dropout)           (None, 50)                0         \n","                                                                 \n"," dense (Dense)               (None, 1)                 51        \n","                                                                 \n","=================================================================\n","Total params: 14251 (55.67 KB)\n","Trainable params: 14251 (55.67 KB)\n","Non-trainable params: 0 (0.00 Byte)\n","_________________________________________________________________\n"]}]},{"cell_type":"code","source":["# Optimizasyon ve değerlendirme metriklerinin ayarlanması\n","model.compile(loss='mean_squared_error',\n","              optimizer='adam')"],"metadata":{"id":"yocAK86Sxwpl","executionInfo":{"status":"ok","timestamp":1711576019534,"user_tz":-180,"elapsed":435,"user":{"displayName":"Ebubekir Doğan","userId":"10058737348807350816"}}},"execution_count":63,"outputs":[]},{"cell_type":"code","source":["callbacks = [EarlyStopping(monitor='val_loss', patience=10, verbose=1, mode='min'),\n","             ModelCheckpoint(filepath='mymodel.h5', monitor='val_loss', mode='min',\n","                             save_best_only=True, save_weights_only=False, verbose=1)]"],"metadata":{"id":"tpZgn7UcxyCn","executionInfo":{"status":"ok","timestamp":1711576021030,"user_tz":-180,"elapsed":305,"user":{"displayName":"Ebubekir Doğan","userId":"10058737348807350816"}}},"execution_count":64,"outputs":[]},{"cell_type":"code","source":["# Model fit\n","history = model.fit(x=x_train,\n","                    y=y_train,\n","                    epochs=100,\n","                    batch_size=40,\n","                    validation_data=(x_test, y_test),\n","                    callbacks=callbacks,\n","                    shuffle=False)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AtsOEvSpxzhF","executionInfo":{"status":"ok","timestamp":1711576039595,"user_tz":-180,"elapsed":17033,"user":{"displayName":"Ebubekir Doğan","userId":"10058737348807350816"}},"outputId":"8759353b-3be1-4ca6-cb2b-d9f0f5957953"},"execution_count":65,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/100\n","21/30 [====================>.........] - ETA: 0s - loss: 0.0172 \n","Epoch 1: val_loss improved from inf to 0.01066, saving model to mymodel.h5\n","30/30 [==============================] - 2s 16ms/step - loss: 0.0184 - val_loss: 0.0107\n","Epoch 2/100\n","21/30 [====================>.........] - ETA: 0s - loss: 0.0031\n","Epoch 2: val_loss improved from 0.01066 to 0.00914, saving model to mymodel.h5\n","30/30 [==============================] - 0s 5ms/step - loss: 0.0053 - val_loss: 0.0091\n","Epoch 3/100\n","22/30 [=====================>........] - ETA: 0s - loss: 0.0046\n","Epoch 3: val_loss improved from 0.00914 to 0.00866, saving model to mymodel.h5\n","30/30 [==============================] - 0s 5ms/step - loss: 0.0059 - val_loss: 0.0087\n","Epoch 4/100\n","23/30 [======================>.......] - ETA: 0s - loss: 0.0021\n","Epoch 4: val_loss improved from 0.00866 to 0.00771, saving model to mymodel.h5\n","30/30 [==============================] - 0s 5ms/step - loss: 0.0039 - val_loss: 0.0077\n","Epoch 5/100\n","19/30 [==================>...........] - ETA: 0s - loss: 0.0015\n","Epoch 5: val_loss improved from 0.00771 to 0.00767, saving model to mymodel.h5\n","30/30 [==============================] - 0s 5ms/step - loss: 0.0036 - val_loss: 0.0077\n","Epoch 6/100\n","20/30 [===================>..........] - ETA: 0s - loss: 0.0019\n","Epoch 6: val_loss did not improve from 0.00767\n","30/30 [==============================] - 0s 4ms/step - loss: 0.0039 - val_loss: 0.0077\n","Epoch 7/100\n","21/30 [====================>.........] - ETA: 0s - loss: 0.0018\n","Epoch 7: val_loss improved from 0.00767 to 0.00765, saving model to mymodel.h5\n","30/30 [==============================] - 0s 5ms/step - loss: 0.0034 - val_loss: 0.0077\n","Epoch 8/100\n","21/30 [====================>.........] - ETA: 0s - loss: 0.0017\n","Epoch 8: val_loss improved from 0.00765 to 0.00734, saving model to mymodel.h5\n","30/30 [==============================] - 0s 5ms/step - loss: 0.0033 - val_loss: 0.0073\n","Epoch 9/100\n","20/30 [===================>..........] - ETA: 0s - loss: 0.0014\n","Epoch 9: val_loss improved from 0.00734 to 0.00728, saving model to mymodel.h5\n","30/30 [==============================] - 0s 5ms/step - loss: 0.0030 - val_loss: 0.0073\n","Epoch 10/100\n","22/30 [=====================>........] - ETA: 0s - loss: 0.0022\n","Epoch 10: val_loss improved from 0.00728 to 0.00710, saving model to mymodel.h5\n","30/30 [==============================] - 0s 5ms/step - loss: 0.0035 - val_loss: 0.0071\n","Epoch 11/100\n","22/30 [=====================>........] - ETA: 0s - loss: 0.0026\n","Epoch 11: val_loss did not improve from 0.00710\n","30/30 [==============================] - 0s 4ms/step - loss: 0.0036 - val_loss: 0.0077\n","Epoch 12/100\n","20/30 [===================>..........] - ETA: 0s - loss: 0.0017\n","Epoch 12: val_loss improved from 0.00710 to 0.00697, saving model to mymodel.h5\n","30/30 [==============================] - 0s 5ms/step - loss: 0.0031 - val_loss: 0.0070\n","Epoch 13/100\n","19/30 [==================>...........] - ETA: 0s - loss: 0.0014\n","Epoch 13: val_loss did not improve from 0.00697\n","30/30 [==============================] - 0s 5ms/step - loss: 0.0024 - val_loss: 0.0076\n","Epoch 14/100\n","20/30 [===================>..........] - ETA: 0s - loss: 0.0013    \n","Epoch 14: val_loss did not improve from 0.00697\n","30/30 [==============================] - 0s 4ms/step - loss: 0.0033 - val_loss: 0.0070\n","Epoch 15/100\n","20/30 [===================>..........] - ETA: 0s - loss: 0.0017\n","Epoch 15: val_loss did not improve from 0.00697\n","30/30 [==============================] - 0s 4ms/step - loss: 0.0037 - val_loss: 0.0073\n","Epoch 16/100\n","16/30 [===============>..............] - ETA: 0s - loss: 0.0012\n","Epoch 16: val_loss improved from 0.00697 to 0.00689, saving model to mymodel.h5\n","30/30 [==============================] - 0s 5ms/step - loss: 0.0030 - val_loss: 0.0069\n","Epoch 17/100\n","20/30 [===================>..........] - ETA: 0s - loss: 0.0017\n","Epoch 17: val_loss did not improve from 0.00689\n","30/30 [==============================] - 0s 4ms/step - loss: 0.0030 - val_loss: 0.0070\n","Epoch 18/100\n","20/30 [===================>..........] - ETA: 0s - loss: 8.8391e-04\n","Epoch 18: val_loss improved from 0.00689 to 0.00687, saving model to mymodel.h5\n","30/30 [==============================] - 0s 5ms/step - loss: 0.0024 - val_loss: 0.0069\n","Epoch 19/100\n","20/30 [===================>..........] - ETA: 0s - loss: 8.0838e-04\n","Epoch 19: val_loss did not improve from 0.00687\n","30/30 [==============================] - 0s 4ms/step - loss: 0.0021 - val_loss: 0.0070\n","Epoch 20/100\n","22/30 [=====================>........] - ETA: 0s - loss: 0.0013    \n","Epoch 20: val_loss improved from 0.00687 to 0.00679, saving model to mymodel.h5\n","30/30 [==============================] - 0s 5ms/step - loss: 0.0026 - val_loss: 0.0068\n","Epoch 21/100\n","21/30 [====================>.........] - ETA: 0s - loss: 0.0010    \n","Epoch 21: val_loss improved from 0.00679 to 0.00674, saving model to mymodel.h5\n","30/30 [==============================] - 0s 5ms/step - loss: 0.0027 - val_loss: 0.0067\n","Epoch 22/100\n","23/30 [======================>.......] - ETA: 0s - loss: 0.0012    \n","Epoch 22: val_loss improved from 0.00674 to 0.00668, saving model to mymodel.h5\n","30/30 [==============================] - 0s 5ms/step - loss: 0.0021 - val_loss: 0.0067\n","Epoch 23/100\n","21/30 [====================>.........] - ETA: 0s - loss: 8.2471e-04\n","Epoch 23: val_loss did not improve from 0.00668\n","30/30 [==============================] - 0s 4ms/step - loss: 0.0022 - val_loss: 0.0069\n","Epoch 24/100\n","20/30 [===================>..........] - ETA: 0s - loss: 0.0010    \n","Epoch 24: val_loss improved from 0.00668 to 0.00660, saving model to mymodel.h5\n","30/30 [==============================] - 0s 5ms/step - loss: 0.0026 - val_loss: 0.0066\n","Epoch 25/100\n","23/30 [======================>.......] - ETA: 0s - loss: 0.0013    \n","Epoch 25: val_loss improved from 0.00660 to 0.00649, saving model to mymodel.h5\n","30/30 [==============================] - 0s 4ms/step - loss: 0.0024 - val_loss: 0.0065\n","Epoch 26/100\n","23/30 [======================>.......] - ETA: 0s - loss: 0.0013    \n","Epoch 26: val_loss improved from 0.00649 to 0.00646, saving model to mymodel.h5\n","30/30 [==============================] - 0s 5ms/step - loss: 0.0026 - val_loss: 0.0065\n","Epoch 27/100\n","22/30 [=====================>........] - ETA: 0s - loss: 0.0012    \n","Epoch 27: val_loss did not improve from 0.00646\n","30/30 [==============================] - 0s 4ms/step - loss: 0.0024 - val_loss: 0.0065\n","Epoch 28/100\n","19/30 [==================>...........] - ETA: 0s - loss: 5.8911e-04\n","Epoch 28: val_loss did not improve from 0.00646\n","30/30 [==============================] - 0s 4ms/step - loss: 0.0022 - val_loss: 0.0065\n","Epoch 29/100\n","23/30 [======================>.......] - ETA: 0s - loss: 0.0012    \n","Epoch 29: val_loss did not improve from 0.00646\n","30/30 [==============================] - 0s 4ms/step - loss: 0.0024 - val_loss: 0.0065\n","Epoch 30/100\n","23/30 [======================>.......] - ETA: 0s - loss: 0.0015    \n","Epoch 30: val_loss did not improve from 0.00646\n","30/30 [==============================] - 0s 4ms/step - loss: 0.0024 - val_loss: 0.0077\n","Epoch 31/100\n","17/30 [================>.............] - ETA: 0s - loss: 5.6150e-04\n","Epoch 31: val_loss did not improve from 0.00646\n","30/30 [==============================] - 0s 4ms/step - loss: 0.0023 - val_loss: 0.0079\n","Epoch 32/100\n","20/30 [===================>..........] - ETA: 0s - loss: 0.0016    \n","Epoch 32: val_loss improved from 0.00646 to 0.00640, saving model to mymodel.h5\n","30/30 [==============================] - 0s 5ms/step - loss: 0.0031 - val_loss: 0.0064\n","Epoch 33/100\n","22/30 [=====================>........] - ETA: 0s - loss: 0.0014    \n","Epoch 33: val_loss did not improve from 0.00640\n","30/30 [==============================] - 0s 4ms/step - loss: 0.0027 - val_loss: 0.0064\n","Epoch 34/100\n","18/30 [=================>............] - ETA: 0s - loss: 9.2998e-04\n","Epoch 34: val_loss did not improve from 0.00640\n","30/30 [==============================] - 0s 4ms/step - loss: 0.0027 - val_loss: 0.0069\n","Epoch 35/100\n","21/30 [====================>.........] - ETA: 0s - loss: 0.0013\n","Epoch 35: val_loss improved from 0.00640 to 0.00627, saving model to mymodel.h5\n","30/30 [==============================] - 0s 5ms/step - loss: 0.0024 - val_loss: 0.0063\n","Epoch 36/100\n","21/30 [====================>.........] - ETA: 0s - loss: 9.9201e-04\n","Epoch 36: val_loss did not improve from 0.00627\n","30/30 [==============================] - 0s 4ms/step - loss: 0.0023 - val_loss: 0.0064\n","Epoch 37/100\n","19/30 [==================>...........] - ETA: 0s - loss: 6.2293e-04\n","Epoch 37: val_loss did not improve from 0.00627\n","30/30 [==============================] - 0s 4ms/step - loss: 0.0025 - val_loss: 0.0065\n","Epoch 38/100\n","22/30 [=====================>........] - ETA: 0s - loss: 0.0012    \n","Epoch 38: val_loss did not improve from 0.00627\n","30/30 [==============================] - 0s 5ms/step - loss: 0.0024 - val_loss: 0.0068\n","Epoch 39/100\n","22/30 [=====================>........] - ETA: 0s - loss: 9.6399e-04\n","Epoch 39: val_loss did not improve from 0.00627\n","30/30 [==============================] - 0s 4ms/step - loss: 0.0020 - val_loss: 0.0064\n","Epoch 40/100\n","20/30 [===================>..........] - ETA: 0s - loss: 7.0931e-04\n","Epoch 40: val_loss improved from 0.00627 to 0.00613, saving model to mymodel.h5\n","30/30 [==============================] - 0s 5ms/step - loss: 0.0021 - val_loss: 0.0061\n","Epoch 41/100\n","24/30 [=======================>......] - ETA: 0s - loss: 0.0011    \n","Epoch 41: val_loss improved from 0.00613 to 0.00613, saving model to mymodel.h5\n","30/30 [==============================] - 0s 8ms/step - loss: 0.0019 - val_loss: 0.0061\n","Epoch 42/100\n","24/30 [=======================>......] - ETA: 0s - loss: 0.0012    \n","Epoch 42: val_loss did not improve from 0.00613\n","30/30 [==============================] - 0s 6ms/step - loss: 0.0022 - val_loss: 0.0065\n","Epoch 43/100\n","25/30 [========================>.....] - ETA: 0s - loss: 0.0011    \n","Epoch 43: val_loss did not improve from 0.00613\n","30/30 [==============================] - 0s 7ms/step - loss: 0.0022 - val_loss: 0.0066\n","Epoch 44/100\n","22/30 [=====================>........] - ETA: 0s - loss: 0.0011    \n","Epoch 44: val_loss improved from 0.00613 to 0.00606, saving model to mymodel.h5\n","30/30 [==============================] - 0s 7ms/step - loss: 0.0020 - val_loss: 0.0061\n","Epoch 45/100\n","28/30 [===========================>..] - ETA: 0s - loss: 0.0017    \n","Epoch 45: val_loss did not improve from 0.00606\n","30/30 [==============================] - 0s 6ms/step - loss: 0.0022 - val_loss: 0.0061\n","Epoch 46/100\n","24/30 [=======================>......] - ETA: 0s - loss: 0.0011    \n","Epoch 46: val_loss did not improve from 0.00606\n","30/30 [==============================] - 0s 6ms/step - loss: 0.0023 - val_loss: 0.0061\n","Epoch 47/100\n","28/30 [===========================>..] - ETA: 0s - loss: 0.0017    \n","Epoch 47: val_loss did not improve from 0.00606\n","30/30 [==============================] - 0s 6ms/step - loss: 0.0022 - val_loss: 0.0066\n","Epoch 48/100\n","25/30 [========================>.....] - ETA: 0s - loss: 0.0013    \n","Epoch 48: val_loss did not improve from 0.00606\n","30/30 [==============================] - 0s 8ms/step - loss: 0.0024 - val_loss: 0.0062\n","Epoch 49/100\n","26/30 [=========================>....] - ETA: 0s - loss: 0.0015    \n","Epoch 49: val_loss did not improve from 0.00606\n","30/30 [==============================] - 0s 6ms/step - loss: 0.0023 - val_loss: 0.0062\n","Epoch 50/100\n","27/30 [==========================>...] - ETA: 0s - loss: 0.0018    \n","Epoch 50: val_loss improved from 0.00606 to 0.00595, saving model to mymodel.h5\n","30/30 [==============================] - 0s 7ms/step - loss: 0.0022 - val_loss: 0.0059\n","Epoch 51/100\n","29/30 [============================>.] - ETA: 0s - loss: 0.0022    \n","Epoch 51: val_loss did not improve from 0.00595\n","30/30 [==============================] - 0s 6ms/step - loss: 0.0024 - val_loss: 0.0062\n","Epoch 52/100\n","26/30 [=========================>....] - ETA: 0s - loss: 0.0019    \n","Epoch 52: val_loss did not improve from 0.00595\n","30/30 [==============================] - 0s 6ms/step - loss: 0.0026 - val_loss: 0.0060\n","Epoch 53/100\n","15/30 [==============>...............] - ETA: 0s - loss: 5.0463e-04\n","Epoch 53: val_loss improved from 0.00595 to 0.00592, saving model to mymodel.h5\n","30/30 [==============================] - 0s 5ms/step - loss: 0.0023 - val_loss: 0.0059\n","Epoch 54/100\n","21/30 [====================>.........] - ETA: 0s - loss: 9.1053e-04\n","Epoch 54: val_loss improved from 0.00592 to 0.00588, saving model to mymodel.h5\n","30/30 [==============================] - 0s 5ms/step - loss: 0.0021 - val_loss: 0.0059\n","Epoch 55/100\n","19/30 [==================>...........] - ETA: 0s - loss: 6.9331e-04\n","Epoch 55: val_loss improved from 0.00588 to 0.00572, saving model to mymodel.h5\n","30/30 [==============================] - 0s 5ms/step - loss: 0.0021 - val_loss: 0.0057\n","Epoch 56/100\n","21/30 [====================>.........] - ETA: 0s - loss: 9.2727e-04\n","Epoch 56: val_loss did not improve from 0.00572\n","30/30 [==============================] - 0s 4ms/step - loss: 0.0023 - val_loss: 0.0061\n","Epoch 57/100\n","21/30 [====================>.........] - ETA: 0s - loss: 7.4758e-04\n","Epoch 57: val_loss did not improve from 0.00572\n","30/30 [==============================] - 0s 4ms/step - loss: 0.0021 - val_loss: 0.0065\n","Epoch 58/100\n","21/30 [====================>.........] - ETA: 0s - loss: 7.2685e-04\n","Epoch 58: val_loss did not improve from 0.00572\n","30/30 [==============================] - 0s 4ms/step - loss: 0.0024 - val_loss: 0.0060\n","Epoch 59/100\n","20/30 [===================>..........] - ETA: 0s - loss: 6.7947e-04\n","Epoch 59: val_loss did not improve from 0.00572\n","30/30 [==============================] - 0s 4ms/step - loss: 0.0022 - val_loss: 0.0058\n","Epoch 60/100\n","22/30 [=====================>........] - ETA: 0s - loss: 0.0013    \n","Epoch 60: val_loss did not improve from 0.00572\n","30/30 [==============================] - 0s 4ms/step - loss: 0.0025 - val_loss: 0.0065\n","Epoch 61/100\n","22/30 [=====================>........] - ETA: 0s - loss: 0.0012    \n","Epoch 61: val_loss did not improve from 0.00572\n","30/30 [==============================] - 0s 4ms/step - loss: 0.0024 - val_loss: 0.0069\n","Epoch 62/100\n","18/30 [=================>............] - ETA: 0s - loss: 6.6603e-04\n","Epoch 62: val_loss did not improve from 0.00572\n","30/30 [==============================] - 0s 4ms/step - loss: 0.0024 - val_loss: 0.0066\n","Epoch 63/100\n","23/30 [======================>.......] - ETA: 0s - loss: 0.0012    \n","Epoch 63: val_loss did not improve from 0.00572\n","30/30 [==============================] - 0s 4ms/step - loss: 0.0025 - val_loss: 0.0068\n","Epoch 64/100\n","20/30 [===================>..........] - ETA: 0s - loss: 7.6780e-04\n","Epoch 64: val_loss did not improve from 0.00572\n","30/30 [==============================] - 0s 4ms/step - loss: 0.0020 - val_loss: 0.0069\n","Epoch 65/100\n","20/30 [===================>..........] - ETA: 0s - loss: 0.0014    \n","Epoch 65: val_loss improved from 0.00572 to 0.00562, saving model to mymodel.h5\n","30/30 [==============================] - 0s 5ms/step - loss: 0.0027 - val_loss: 0.0056\n","Epoch 66/100\n","22/30 [=====================>........] - ETA: 0s - loss: 0.0020\n","Epoch 66: val_loss improved from 0.00562 to 0.00548, saving model to mymodel.h5\n","30/30 [==============================] - 0s 5ms/step - loss: 0.0030 - val_loss: 0.0055\n","Epoch 67/100\n","20/30 [===================>..........] - ETA: 0s - loss: 0.0018\n","Epoch 67: val_loss did not improve from 0.00548\n","30/30 [==============================] - 0s 4ms/step - loss: 0.0029 - val_loss: 0.0075\n","Epoch 68/100\n","21/30 [====================>.........] - ETA: 0s - loss: 0.0024\n","Epoch 68: val_loss did not improve from 0.00548\n","30/30 [==============================] - 0s 4ms/step - loss: 0.0032 - val_loss: 0.0062\n","Epoch 69/100\n","21/30 [====================>.........] - ETA: 0s - loss: 9.3636e-04\n","Epoch 69: val_loss improved from 0.00548 to 0.00547, saving model to mymodel.h5\n","30/30 [==============================] - 0s 5ms/step - loss: 0.0021 - val_loss: 0.0055\n","Epoch 70/100\n","21/30 [====================>.........] - ETA: 0s - loss: 9.9305e-04\n","Epoch 70: val_loss did not improve from 0.00547\n","30/30 [==============================] - 0s 4ms/step - loss: 0.0023 - val_loss: 0.0059\n","Epoch 71/100\n","21/30 [====================>.........] - ETA: 0s - loss: 0.0014    \n","Epoch 71: val_loss did not improve from 0.00547\n","30/30 [==============================] - 0s 4ms/step - loss: 0.0027 - val_loss: 0.0061\n","Epoch 72/100\n","23/30 [======================>.......] - ETA: 0s - loss: 0.0013    \n","Epoch 72: val_loss did not improve from 0.00547\n","30/30 [==============================] - 0s 4ms/step - loss: 0.0023 - val_loss: 0.0063\n","Epoch 73/100\n","22/30 [=====================>........] - ETA: 0s - loss: 0.0011    \n","Epoch 73: val_loss did not improve from 0.00547\n","30/30 [==============================] - 0s 4ms/step - loss: 0.0023 - val_loss: 0.0061\n","Epoch 74/100\n","20/30 [===================>..........] - ETA: 0s - loss: 7.9529e-04\n","Epoch 74: val_loss did not improve from 0.00547\n","30/30 [==============================] - 0s 4ms/step - loss: 0.0024 - val_loss: 0.0062\n","Epoch 75/100\n","20/30 [===================>..........] - ETA: 0s - loss: 7.9467e-04\n","Epoch 75: val_loss did not improve from 0.00547\n","30/30 [==============================] - 0s 4ms/step - loss: 0.0021 - val_loss: 0.0058\n","Epoch 76/100\n","22/30 [=====================>........] - ETA: 0s - loss: 0.0012    \n","Epoch 76: val_loss improved from 0.00547 to 0.00528, saving model to mymodel.h5\n","30/30 [==============================] - 0s 5ms/step - loss: 0.0023 - val_loss: 0.0053\n","Epoch 77/100\n","22/30 [=====================>........] - ETA: 0s - loss: 0.0011\n","Epoch 77: val_loss did not improve from 0.00528\n","30/30 [==============================] - 0s 6ms/step - loss: 0.0019 - val_loss: 0.0055\n","Epoch 78/100\n","19/30 [==================>...........] - ETA: 0s - loss: 6.6973e-04\n","Epoch 78: val_loss did not improve from 0.00528\n","30/30 [==============================] - 0s 4ms/step - loss: 0.0020 - val_loss: 0.0053\n","Epoch 79/100\n","22/30 [=====================>........] - ETA: 0s - loss: 9.7054e-04\n","Epoch 79: val_loss did not improve from 0.00528\n","30/30 [==============================] - 0s 4ms/step - loss: 0.0021 - val_loss: 0.0054\n","Epoch 80/100\n","21/30 [====================>.........] - ETA: 0s - loss: 9.9138e-04\n","Epoch 80: val_loss did not improve from 0.00528\n","30/30 [==============================] - 0s 4ms/step - loss: 0.0022 - val_loss: 0.0058\n","Epoch 81/100\n","15/30 [==============>...............] - ETA: 0s - loss: 4.3803e-04\n","Epoch 81: val_loss did not improve from 0.00528\n","30/30 [==============================] - 0s 4ms/step - loss: 0.0021 - val_loss: 0.0062\n","Epoch 82/100\n","20/30 [===================>..........] - ETA: 0s - loss: 6.3650e-04\n","Epoch 82: val_loss did not improve from 0.00528\n","30/30 [==============================] - 0s 4ms/step - loss: 0.0020 - val_loss: 0.0062\n","Epoch 83/100\n","21/30 [====================>.........] - ETA: 0s - loss: 7.2430e-04\n","Epoch 83: val_loss did not improve from 0.00528\n","30/30 [==============================] - 0s 4ms/step - loss: 0.0019 - val_loss: 0.0055\n","Epoch 84/100\n","20/30 [===================>..........] - ETA: 0s - loss: 8.2860e-04\n","Epoch 84: val_loss did not improve from 0.00528\n","30/30 [==============================] - 0s 4ms/step - loss: 0.0023 - val_loss: 0.0054\n","Epoch 85/100\n","22/30 [=====================>........] - ETA: 0s - loss: 9.1815e-04\n","Epoch 85: val_loss did not improve from 0.00528\n","30/30 [==============================] - 0s 4ms/step - loss: 0.0019 - val_loss: 0.0053\n","Epoch 86/100\n","19/30 [==================>...........] - ETA: 0s - loss: 7.3627e-04\n","Epoch 86: val_loss improved from 0.00528 to 0.00515, saving model to mymodel.h5\n","30/30 [==============================] - 0s 5ms/step - loss: 0.0023 - val_loss: 0.0051\n","Epoch 87/100\n","22/30 [=====================>........] - ETA: 0s - loss: 0.0011    \n","Epoch 87: val_loss did not improve from 0.00515\n","30/30 [==============================] - 0s 4ms/step - loss: 0.0022 - val_loss: 0.0052\n","Epoch 88/100\n","23/30 [======================>.......] - ETA: 0s - loss: 0.0011    \n","Epoch 88: val_loss did not improve from 0.00515\n","30/30 [==============================] - 0s 4ms/step - loss: 0.0022 - val_loss: 0.0053\n","Epoch 89/100\n","20/30 [===================>..........] - ETA: 0s - loss: 0.0012    \n","Epoch 89: val_loss did not improve from 0.00515\n","30/30 [==============================] - 0s 4ms/step - loss: 0.0028 - val_loss: 0.0061\n","Epoch 90/100\n","16/30 [===============>..............] - ETA: 0s - loss: 5.8262e-04\n","Epoch 90: val_loss did not improve from 0.00515\n","30/30 [==============================] - 0s 5ms/step - loss: 0.0024 - val_loss: 0.0066\n","Epoch 91/100\n","20/30 [===================>..........] - ETA: 0s - loss: 0.0010    \n","Epoch 91: val_loss did not improve from 0.00515\n","30/30 [==============================] - 0s 4ms/step - loss: 0.0025 - val_loss: 0.0064\n","Epoch 92/100\n","16/30 [===============>..............] - ETA: 0s - loss: 4.8849e-04\n","Epoch 92: val_loss did not improve from 0.00515\n","30/30 [==============================] - 0s 5ms/step - loss: 0.0019 - val_loss: 0.0068\n","Epoch 93/100\n","20/30 [===================>..........] - ETA: 0s - loss: 0.0011    \n","Epoch 93: val_loss did not improve from 0.00515\n","30/30 [==============================] - 0s 4ms/step - loss: 0.0024 - val_loss: 0.0063\n","Epoch 94/100\n","21/30 [====================>.........] - ETA: 0s - loss: 0.0012\n","Epoch 94: val_loss did not improve from 0.00515\n","30/30 [==============================] - 0s 4ms/step - loss: 0.0021 - val_loss: 0.0056\n","Epoch 95/100\n","22/30 [=====================>........] - ETA: 0s - loss: 0.0017\n","Epoch 95: val_loss improved from 0.00515 to 0.00507, saving model to mymodel.h5\n","30/30 [==============================] - 0s 4ms/step - loss: 0.0024 - val_loss: 0.0051\n","Epoch 96/100\n","22/30 [=====================>........] - ETA: 0s - loss: 0.0023\n","Epoch 96: val_loss did not improve from 0.00507\n","30/30 [==============================] - 0s 4ms/step - loss: 0.0031 - val_loss: 0.0074\n","Epoch 97/100\n","18/30 [=================>............] - ETA: 0s - loss: 0.0025\n","Epoch 97: val_loss did not improve from 0.00507\n","30/30 [==============================] - 0s 4ms/step - loss: 0.0032 - val_loss: 0.0053\n","Epoch 98/100\n","21/30 [====================>.........] - ETA: 0s - loss: 0.0015    \n","Epoch 98: val_loss did not improve from 0.00507\n","30/30 [==============================] - 0s 4ms/step - loss: 0.0027 - val_loss: 0.0058\n","Epoch 99/100\n","20/30 [===================>..........] - ETA: 0s - loss: 0.0014    \n","Epoch 99: val_loss did not improve from 0.00507\n","30/30 [==============================] - 0s 4ms/step - loss: 0.0028 - val_loss: 0.0063\n","Epoch 100/100\n","20/30 [===================>..........] - ETA: 0s - loss: 0.0010    \n","Epoch 100: val_loss did not improve from 0.00507\n","30/30 [==============================] - 0s 4ms/step - loss: 0.0026 - val_loss: 0.0061\n"]}]},{"cell_type":"code","source":["plt.figure(figsize=(20, 5))\n","plt.subplot(1, 2, 2)\n","plt.plot(history.history['loss'], label='Training Loss')\n","plt.plot(history.history['val_loss'], label='Validation Loss')\n","plt.legend(loc='upper right')\n","plt.xlabel('Epoch', fontsize=16)\n","plt.ylabel('Loss', fontsize=16)\n","plt.ylim([0, max(plt.ylim())])\n","plt.title('Training and Validation Loss', fontsize=16)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":495},"id":"of2aLxQEx4PN","executionInfo":{"status":"ok","timestamp":1711576054218,"user_tz":-180,"elapsed":1002,"user":{"displayName":"Ebubekir Doğan","userId":"10058737348807350816"}},"outputId":"ac7aa6fa-3c90-4bd4-eb49-b222928ccc3d"},"execution_count":66,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 2000x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["loss = model.evaluate(x_test, y_test, batch_size=40)\n","print('\\nTest Loss: %.1f%%' % (100.0 * loss))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6qxEFJTZx9X9","executionInfo":{"status":"ok","timestamp":1711576057884,"user_tz":-180,"elapsed":288,"user":{"displayName":"Ebubekir Doğan","userId":"10058737348807350816"}},"outputId":"b74001be-f09b-41fb-ae8b-494b17618a72"},"execution_count":67,"outputs":[{"output_type":"stream","name":"stdout","text":["8/8 [==============================] - 0s 2ms/step - loss: 0.0061\n","\n","Test Loss: 0.6%\n"]}]},{"cell_type":"code","source":["# Modelimizden tahminleri alıyoruz\n","train_predict = model.predict(x_train)\n","test_predict = model.predict(x_test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"e9B1wb4iyAt-","executionInfo":{"status":"ok","timestamp":1711576059929,"user_tz":-180,"elapsed":595,"user":{"displayName":"Ebubekir Doğan","userId":"10058737348807350816"}},"outputId":"5b7a7617-eb99-416a-e083-968e89317a29"},"execution_count":68,"outputs":[{"output_type":"stream","name":"stdout","text":["38/38 [==============================] - 0s 2ms/step\n","9/9 [==============================] - 0s 2ms/step\n"]}]},{"cell_type":"code","source":["# Standartlaştırılmış tahmin verilerini gerçek değerlere geri dönüştürüyoruz\n","train_predict = scaler_train.inverse_transform(train_predict)\n","test_predict = scaler_test.inverse_transform(test_predict)"],"metadata":{"id":"lB1IJkj0yDH2","executionInfo":{"status":"ok","timestamp":1711576066585,"user_tz":-180,"elapsed":299,"user":{"displayName":"Ebubekir Doğan","userId":"10058737348807350816"}}},"execution_count":69,"outputs":[]},{"cell_type":"code","source":["# Yukarıdaki aynı işlemi eğitilen ve test edilen veri setlerine de yapıyoruz\n","y_train = scaler_train.inverse_transform(y_train)\n","y_test = scaler_test.inverse_transform(y_test)"],"metadata":{"id":"Ajs7rYQYyEoT","executionInfo":{"status":"ok","timestamp":1711576068159,"user_tz":-180,"elapsed":300,"user":{"displayName":"Ebubekir Doğan","userId":"10058737348807350816"}}},"execution_count":70,"outputs":[]},{"cell_type":"code","source":["# Train RMSE\n","train_rmse = np.sqrt(mean_squared_error(y_train, train_predict))"],"metadata":{"id":"eIDAINTdyF9W","executionInfo":{"status":"ok","timestamp":1711576069348,"user_tz":-180,"elapsed":289,"user":{"displayName":"Ebubekir Doğan","userId":"10058737348807350816"}}},"execution_count":71,"outputs":[]},{"cell_type":"code","source":["# Test RMSE\n","test_rmse = np.sqrt(mean_squared_error(y_test, test_predict))"],"metadata":{"id":"Miwmtxx4yHYH","executionInfo":{"status":"ok","timestamp":1711576070568,"user_tz":-180,"elapsed":293,"user":{"displayName":"Ebubekir Doğan","userId":"10058737348807350816"}}},"execution_count":72,"outputs":[]},{"cell_type":"code","source":["print(f'Train RMSE: {train_rmse}')\n","print(f' Test RMSE: {test_rmse}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uTR_WHOpyIlm","executionInfo":{"status":"ok","timestamp":1711576071552,"user_tz":-180,"elapsed":2,"user":{"displayName":"Ebubekir Doğan","userId":"10058737348807350816"}},"outputId":"e2151fba-01ee-4e8e-862b-c30b22b94c53"},"execution_count":73,"outputs":[{"output_type":"stream","name":"stdout","text":["Train RMSE: 4.121084690093994\n"," Test RMSE: 8.571823120117188\n"]}]},{"cell_type":"code","source":["# Gerçek değerler ile tahmin edilen değerleri train veri seti için kıyaslama\n","train_prediction_df = result_df[lookback:pos]\n","train_prediction_df['Predicted'] = train_predict\n","train_prediction_df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":237},"id":"vEE6u9LtyVJm","executionInfo":{"status":"ok","timestamp":1711576076892,"user_tz":-180,"elapsed":326,"user":{"displayName":"Ebubekir Doğan","userId":"10058737348807350816"}},"outputId":"bb699979-e418-4728-a34a-e8a49d9df555"},"execution_count":74,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                     Close  Predicted\n","Date                                 \n","2015-04-30 16:00:00  48.64  48.045712\n","2015-05-01 16:00:00  48.66  48.097023\n","2015-05-04 16:00:00  48.24  48.134743\n","2015-05-05 16:00:00  47.60  48.077736\n","2015-05-06 16:00:00  46.28  48.104050"],"text/html":["\n","  <div id=\"df-a3b0abcc-486a-41cb-832d-3bb83dd79c5c\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Close</th>\n","      <th>Predicted</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2015-04-30 16:00:00</th>\n","      <td>48.64</td>\n","      <td>48.045712</td>\n","    </tr>\n","    <tr>\n","      <th>2015-05-01 16:00:00</th>\n","      <td>48.66</td>\n","      <td>48.097023</td>\n","    </tr>\n","    <tr>\n","      <th>2015-05-04 16:00:00</th>\n","      <td>48.24</td>\n","      <td>48.134743</td>\n","    </tr>\n","    <tr>\n","      <th>2015-05-05 16:00:00</th>\n","      <td>47.60</td>\n","      <td>48.077736</td>\n","    </tr>\n","    <tr>\n","      <th>2015-05-06 16:00:00</th>\n","      <td>46.28</td>\n","      <td>48.104050</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a3b0abcc-486a-41cb-832d-3bb83dd79c5c')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-a3b0abcc-486a-41cb-832d-3bb83dd79c5c button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-a3b0abcc-486a-41cb-832d-3bb83dd79c5c');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-a5b5bbdd-534d-4221-ab03-87402899e41c\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a5b5bbdd-534d-4221-ab03-87402899e41c')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-a5b5bbdd-534d-4221-ab03-87402899e41c button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"train_prediction_df","summary":"{\n  \"name\": \"train_prediction_df\",\n  \"rows\": 1189,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2015-04-30 16:00:00\",\n        \"max\": \"2020-01-17 16:00:00\",\n        \"num_unique_values\": 1189,\n        \"samples\": [\n          \"2016-08-04 16:00:00\",\n          \"2019-12-03 16:00:00\",\n          \"2018-12-04 16:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 32.3159237929935,\n        \"min\": 40.47,\n        \"max\": 167.1,\n        \"num_unique_values\": 1083,\n        \"samples\": [\n          45.34,\n          65.39,\n          85.51\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Predicted\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 1189,\n        \"samples\": [\n          52.686668395996094,\n          149.59999084472656,\n          104.56616973876953\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":74}]},{"cell_type":"code","source":["# Gerçek değerler ile tahmin edilen değerleri test veri seti için kıyaslama\n","test_prediction_df = result_df[pos+lookback:] # pos+lookback yani trainden sonraki kısmı aldık\n","test_prediction_df['Predicted'] = test_predict\n","test_prediction_df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":237},"id":"tfPo71rtyYRW","executionInfo":{"status":"ok","timestamp":1711576080210,"user_tz":-180,"elapsed":480,"user":{"displayName":"Ebubekir Doğan","userId":"10058737348807350816"}},"outputId":"f9d6eda4-8763-4d8d-c511-441b55dc00b4"},"execution_count":75,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                      Close   Predicted\n","Date                                   \n","2020-02-19 16:00:00  187.28  175.833191\n","2020-02-20 16:00:00  184.42  177.077957\n","2020-02-21 16:00:00  178.59  178.211975\n","2020-02-24 16:00:00  170.89  177.931229\n","2020-02-25 16:00:00  168.07  176.958176"],"text/html":["\n","  <div id=\"df-aa0d95f5-4521-4d7b-8301-ed54e9ee9467\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Close</th>\n","      <th>Predicted</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2020-02-19 16:00:00</th>\n","      <td>187.28</td>\n","      <td>175.833191</td>\n","    </tr>\n","    <tr>\n","      <th>2020-02-20 16:00:00</th>\n","      <td>184.42</td>\n","      <td>177.077957</td>\n","    </tr>\n","    <tr>\n","      <th>2020-02-21 16:00:00</th>\n","      <td>178.59</td>\n","      <td>178.211975</td>\n","    </tr>\n","    <tr>\n","      <th>2020-02-24 16:00:00</th>\n","      <td>170.89</td>\n","      <td>177.931229</td>\n","    </tr>\n","    <tr>\n","      <th>2020-02-25 16:00:00</th>\n","      <td>168.07</td>\n","      <td>176.958176</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-aa0d95f5-4521-4d7b-8301-ed54e9ee9467')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-aa0d95f5-4521-4d7b-8301-ed54e9ee9467 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-aa0d95f5-4521-4d7b-8301-ed54e9ee9467');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-d5080c07-24b1-4e9b-a111-2220c41013f9\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d5080c07-24b1-4e9b-a111-2220c41013f9')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-d5080c07-24b1-4e9b-a111-2220c41013f9 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"test_prediction_df","summary":"{\n  \"name\": \"test_prediction_df\",\n  \"rows\": 282,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2020-02-19 16:00:00\",\n        \"max\": \"2021-03-31 16:00:00\",\n        \"num_unique_values\": 282,\n        \"samples\": [\n          \"2020-06-30 16:00:00\",\n          \"2020-07-01 16:00:00\",\n          \"2020-11-02 16:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 25.159193338509215,\n        \"min\": 135.42,\n        \"max\": 244.99,\n        \"num_unique_values\": 277,\n        \"samples\": [\n          152.11,\n          214.58,\n          218.29\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Predicted\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 282,\n        \"samples\": [\n          192.032958984375,\n          193.48480224609375,\n          209.84730529785156\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":75}]},{"cell_type":"code","source":["# Veri setinin en güncel tarihteki test tahminleri\n","test_prediction_df.tail(10)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":394},"id":"i2IzX7Bmya6f","executionInfo":{"status":"ok","timestamp":1711576082826,"user_tz":-180,"elapsed":341,"user":{"displayName":"Ebubekir Doğan","userId":"10058737348807350816"}},"outputId":"aa76f3b5-3274-4c23-df33-bdf03b83d9b3"},"execution_count":76,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                      Close   Predicted\n","Date                                   \n","2021-03-18 16:00:00  230.72  234.055222\n","2021-03-19 16:00:00  230.35  233.129715\n","2021-03-22 16:00:00  235.99  233.078537\n","2021-03-23 16:00:00  237.58  234.536697\n","2021-03-24 16:00:00  235.46  234.593384\n","2021-03-25 16:00:00  232.34  234.596024\n","2021-03-26 16:00:00  236.48  234.207703\n","2021-03-29 16:00:00  235.24  235.096237\n","2021-03-30 16:00:00  231.85  234.728195\n","2021-03-31 16:00:00  235.77  234.042755"],"text/html":["\n","  <div id=\"df-8ce58115-9c2d-40ba-9877-a2c606fc5443\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Close</th>\n","      <th>Predicted</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2021-03-18 16:00:00</th>\n","      <td>230.72</td>\n","      <td>234.055222</td>\n","    </tr>\n","    <tr>\n","      <th>2021-03-19 16:00:00</th>\n","      <td>230.35</td>\n","      <td>233.129715</td>\n","    </tr>\n","    <tr>\n","      <th>2021-03-22 16:00:00</th>\n","      <td>235.99</td>\n","      <td>233.078537</td>\n","    </tr>\n","    <tr>\n","      <th>2021-03-23 16:00:00</th>\n","      <td>237.58</td>\n","      <td>234.536697</td>\n","    </tr>\n","    <tr>\n","      <th>2021-03-24 16:00:00</th>\n","      <td>235.46</td>\n","      <td>234.593384</td>\n","    </tr>\n","    <tr>\n","      <th>2021-03-25 16:00:00</th>\n","      <td>232.34</td>\n","      <td>234.596024</td>\n","    </tr>\n","    <tr>\n","      <th>2021-03-26 16:00:00</th>\n","      <td>236.48</td>\n","      <td>234.207703</td>\n","    </tr>\n","    <tr>\n","      <th>2021-03-29 16:00:00</th>\n","      <td>235.24</td>\n","      <td>235.096237</td>\n","    </tr>\n","    <tr>\n","      <th>2021-03-30 16:00:00</th>\n","      <td>231.85</td>\n","      <td>234.728195</td>\n","    </tr>\n","    <tr>\n","      <th>2021-03-31 16:00:00</th>\n","      <td>235.77</td>\n","      <td>234.042755</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8ce58115-9c2d-40ba-9877-a2c606fc5443')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-8ce58115-9c2d-40ba-9877-a2c606fc5443 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-8ce58115-9c2d-40ba-9877-a2c606fc5443');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-ca4f5db9-592f-4365-935d-11a3c81f6603\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ca4f5db9-592f-4365-935d-11a3c81f6603')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-ca4f5db9-592f-4365-935d-11a3c81f6603 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"test_prediction_df\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2021-03-18 16:00:00\",\n        \"max\": \"2021-03-31 16:00:00\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"2021-03-30 16:00:00\",\n          \"2021-03-19 16:00:00\",\n          \"2021-03-25 16:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.600665726736569,\n        \"min\": 230.35,\n        \"max\": 237.58,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          231.85,\n          230.35,\n          232.34\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Predicted\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          234.7281951904297,\n          233.1297149658203,\n          234.5960235595703\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":76}]},{"cell_type":"code","source":["# Train ve Test Tahminlerini ayrı ayrı görselleştirme\n","plt.figure(figsize=(14, 5))\n","plt.plot(result_df, label='Real Values')\n","plt.plot(train_prediction_df['Predicted'], color='blue', label='Train Predicted')\n","plt.plot(test_prediction_df['Predicted'], color='red', label='Test Predicted')\n","plt.xlabel('Time')\n","plt.ylabel('Stock Values')\n","plt.legend()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":447},"id":"TlCtvUxSycwG","executionInfo":{"status":"ok","timestamp":1711576086046,"user_tz":-180,"elapsed":721,"user":{"displayName":"Ebubekir Doğan","userId":"10058737348807350816"}},"outputId":"c4752edb-5631-4902-9707-b945abb6279c"},"execution_count":77,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1400x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]}]}